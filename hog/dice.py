"""Functions that simulate dice rolls.
模拟掷骰子的函数。

A dice function takes no arguments and returns a number from 1 to n
(inclusive), where n is the number of sides on the dice.
骰子函数不带任何参数，返回一个从 1 到 n 的数字
（含），其中 n 是骰子上的边数。
Types of dice:

 -  A fair dice produces each possible outcome with equal probability.
   Two fair dice are already defined, four_sided and six_sided,
   and are generated by the make_fair_dice function.
   公平的骰子以相等的概率产生每个可能的结果。
   已经定义了两个公平的骰子,four_sided和six_sided,
   并由make_fair_dice函数生成。

 -  A test dice is deterministic: it always cycles through a fixed
   sequence of values that are passed as arguments.
   Test dice are generated by the make_test_dice function.
   测试骰子是确定性的：它总是在固定的骰子中循环
   作为参数传递的值序列。
   测试骰子由make_test_dice函数生成。
"""

from random import randint


def make_fair_dice(sides):# 随机骰子
    """Return a die that returns 1 to SIDES with equal chance."""
    assert type(sides) == int and sides >= 1, 'Illegal value for sides'

    def dice():
        return randint(1, sides)
    return dice


four_sided = make_fair_dice(4)
six_sided = make_fair_dice(6)


def make_test_dice(*outcomes):# 固定骰子
    """Return a die that cycles deterministically through OUTCOMES.
        返回一个通过结果确定性循环的骰子。

    >>> dice = make_test_dice(1, 2, 3)
    >>> dice()
    1
    >>> dice()
    2
    >>> dice()
    3
    >>> dice()
    1
    >>> dice()
    2

    This function uses Python syntax/techniques not yet covered in this course.
    The best way to understand it is by reading the documentation and examples.
    此函数使用本课程中尚未涵盖的 Python 语法/技术。
    理解它的最佳方法是阅读文档和示例。
    """
    assert len(outcomes) > 0, 'You must supply outcomes to make_test_dice'
    for o in outcomes:
        assert type(o) == int and o >= 1, 'Outcome is not a positive integer'
    index = len(outcomes) - 1

    def dice():
        nonlocal index
        index = (index + 1) % len(outcomes)
        return outcomes[index]
    return dice

#在做期中考试2的时候,你已经学习过了生成器,所以这里还有一种采用生成器的方法去生成骰子
def make_test_dice(outcomes):
    """Return an infinite iterator that cycles through th elements of outcomes.

    >>> dice = make_test_dice(1, 2, 3)
    >>> next(dice)
    1
    >>> next(dice)
    2
    >>> next(dice)
    3
    >>> next(dice)
    1
    >>> next(dice)
    2
    """
    outcomes=list(outcomes)
    while True:
        for i in outcomes:
            yield i